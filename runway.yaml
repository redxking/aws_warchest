---
ignore_git_branch: true

variables:
  customer: the-dev-team
  account_id:
    master:  922481319116
    audit:   260992085298
    archive: 974093653591 
    network: 485355486848 
    commons: 187739744457
    sandbox: 535005587294 
    develop: 648027066783
    staging: 875358465253
    product: 727515289814
  assume_role:
    master:  arn:aws:iam::922481319116:role/AWSAdministratorAccess
    audit:   arn:aws:iam::260992085298:role/AWSControlTowerExecution
    archive: arn:aws:iam::974093653591:role/AWSControlTowerExecution
    network: arn:aws:iam::485355486848:role/AWSControlTowerExecution
    commons: arn:aws:iam::187739744457:role/AWSControlTowerExecution
    sandbox: arn:aws:iam::535005587294:role/AWSControlTowerExecution
    develop: arn:aws:iam::648027066783:role/AWSControlTowerExecution
    staging: arn:aws:iam::875358465253:role/AWSControlTowerExecution
    product: arn:aws:iam::727515289814:role/AWSControlTowerExecution


deployments:
  ##############################################################################
  # AWS Cloudformation to automate the deployment of Terraform Backend State
  # Management in the AWS Cloud.
  - name: backend-terraform
    modules:
      - path: cloudformation/configs/backend_terraform
        type: cloudformation
    environments:
      master:  true
      audit:   true
      archive: true
      network: true
      commons: true
      sandbox: true
      develop: true
      staging: true
      product: true
    parameters:
      namespace: ${var customer}-${env DEPLOY_ENVIRONMENT}
      cfngin_bucket: cfngin-${var customer}-${env DEPLOY_ENVIRONMENT}-${env AWS_REGION}
    parallel_regions:
      - us-east-1
    account_id: ${var account_id.${env DEPLOY_ENVIRONMENT}}
    assume_role:
      arn: ${var assume_role.${env DEPLOY_ENVIRONMENT}}
      post_deploy_env_revert: true
  
  ##############################################################################
  # AWS Cloudformation to automate the deployment of Serverless Backend State
  # Management in the AWS Cloud.
  - name: backend-serverless
    modules:
      - path: cloudformation/configs/backend_serverless
        type: cloudformation
    environments:
      master:  false
      audit:   false
      archive: false
      network: false
      commons: true
      sandbox: true
      develop: true
      staging: true
      product: true
    parameters:
      namespace: ${var customer}-${env DEPLOY_ENVIRONMENT}
      cfngin_bucket: cfngin-${var customer}-${env DEPLOY_ENVIRONMENT}-${env AWS_REGION}
    parallel_regions:
      - us-east-1
    account_id: ${var account_id.${env DEPLOY_ENVIRONMENT}}
    assume_role:
      arn: ${var assume_role.${env DEPLOY_ENVIRONMENT}}
      post_deploy_env_revert: true

  ##############################################################################
  # AWS CloudFormation to automate the deployment of Serverless Transit Network
  # Orchestrator in the AWS Cloud.
  - name: transit-network-orchestrator-organization-role
    modules:
      - path: cloudformation/configs/stno-org-role
        type: cloudformation
    environments:
      master:  true
      audit:   false
      archive: false
      network: false
      commons: false
      sandbox: false
      develop: false
      staging: false
      product: false
    parameters:
      namespace: ${var customer}-${env DEPLOY_ENVIRONMENT}
      cfngin_bucket: cfngin-${var customer}-${env DEPLOY_ENVIRONMENT}-${env AWS_REGION}
      HubAccount: ${var account_id.network}
      RoleName: ${var customer}-master-stno-OrganizationInformationRole 
    parallel_regions:
      - us-east-1
    account_id: ${var account_id.${env DEPLOY_ENVIRONMENT}}
    assume_role:
      arn: ${var assume_role.${env DEPLOY_ENVIRONMENT}}
      post_deploy_env_revert: true

  - name: transit-network-orchestrator-hub
    modules:
      - path: cloudformation/configs/stno-hub
        type: cloudformation
    environments:
      master:  false
      audit:   false
      archive: false
      network: true
      commons: false
      sandbox: false
      develop: false
      staging: false
      product: false
    parameters:
      namespace: ${var customer}-${env DEPLOY_ENVIRONMENT}
      cfngin_bucket: cfngin-${var customer}-${env DEPLOY_ENVIRONMENT}-${env AWS_REGION}
      OrganizationManagementAccountRoleArn: 'arn:aws:iam::${var account_id.master}:role/${var customer}-master-stno-OrganizationInformationRole'
    parallel_regions:
      - us-east-1
    account_id: ${var account_id.${env DEPLOY_ENVIRONMENT}}
    assume_role:
      arn: ${var assume_role.${env DEPLOY_ENVIRONMENT}}
      post_deploy_env_revert: true

  - name: transit-network-orchestrator-spoke
    modules:
      - path: cloudformation/configs/stno-spoke
        type: cloudformation
    environments:
      master:  false
      audit:   false
      archive: false
      network: false
      commons: true
      sandbox: true
      develop: true
      staging: true
      product: true
    parameters:
      namespace: ${var customer}-${env DEPLOY_ENVIRONMENT}
      cfngin_bucket: cfngin-${var customer}-${env DEPLOY_ENVIRONMENT}-${env AWS_REGION}
      HubAccount: ${var account_id.network}
    parallel_regions:
      - us-east-1
    account_id: ${var account_id.${env DEPLOY_ENVIRONMENT}}
    assume_role:
      arn: ${var assume_role.${env DEPLOY_ENVIRONMENT}}
      post_deploy_env_revert: true

 ###############################################################################
 # Terraform to automate the deployment of Vpcs and their supporting resources
 # in the AWS Cloud.
  - name: transit-network-vpcs
    modules:
      - path: terraform/configs/networking/01-vpc
        type: terraform
      - path: terraform/configs/networking/02-security-groups
        type: terraform
      - path: terraform/configs/networking/03-routes
        type: terraform
      - path: terraform/configs/networking/04-endpoints
        type: terraform
      - path: terraform/configs/networking/05-ec2-instances
        type: terraform
    module_options:
      terraform_version: "1.2.5"
      terraform_backend_config:
        bucket: ${cfn ${var customer}-${env DEPLOY_ENVIRONMENT}-terraform-state.oTerraformStateS3Bucket}
        dynamodb_table: ${cfn ${var customer}-${env DEPLOY_ENVIRONMENT}-terraform-state.oTerraformStateLockDynamoDBTable}
        region: ${env AWS_REGION}
    environments:
      master:  false
      audit:   false
      archive: false
      network: false
      commons: true 
      sandbox: false
      develop: true
      staging: true
      product: true 
    parameters:
      namespace: ${var customer}-${env DEPLOY_ENVIRONMENT}
      environment: ${env DEPLOY_ENVIRONMENT}
      region: ${env AWS_REGION}
    parallel_regions:
      - us-east-1
    account_id: ${var account_id.${env DEPLOY_ENVIRONMENT}}
    assume_role:
      arn: ${var assume_role.${env DEPLOY_ENVIRONMENT}}
      post_deploy_env_revert: true
 
 ###############################################################################
 # Terraform to automate the deployment of IAM Roles and their supporting resources
 # in the AWS Cloud.
  - name: iam-role-and-policies
    modules:
      - path: terraform/configs/iam/01-roles
        type: terraform
    module_options:
      terraform_version: "1.2.5"
      terraform_backend_config:
        bucket: ${cfn ${var customer}-${env DEPLOY_ENVIRONMENT}-terraform-state.oTerraformStateS3Bucket}
        dynamodb_table: ${cfn ${var customer}-${env DEPLOY_ENVIRONMENT}-terraform-state.oTerraformStateLockDynamoDBTable}
        region: ${env AWS_REGION}
    environments:
      master:  false
      audit:   false
      archive: false
      network: false
      commons: true 
      sandbox: true
      develop: true
      staging: true
      product: true 
    parameters:
      namespace: ${var customer}-${env DEPLOY_ENVIRONMENT}
      environment: ${env DEPLOY_ENVIRONMENT}
      region: ${env AWS_REGION}
    parallel_regions:
      - us-east-1
    account_id: ${var account_id.${env DEPLOY_ENVIRONMENT}}
    assume_role:
      arn: ${var assume_role.${env DEPLOY_ENVIRONMENT}}
      post_deploy_env_revert: true

  ###############################################################################
  # Serverless Framework to automate the deployment of Lambda Functions and their
  # supporting resources in the AWS Cloud.
  - name: cost_optimizers 
    modules:
      - path: serverless
        type: serverless
        env_vars:
          stack: cost-optimizers 
          deployment_bucket: ${cfn ${var customer}-${env DEPLOY_ENVIRONMENT}-serverless-state.oStateS3Bucket}
          account_id_network: 485355486848
          account_id_commons: 187739744457 
          account_id_sandbox: 535005587294 
          account_id_develop: 648027066783
          account_id_staging: 875358465253
          account_id_product: 727515289814
        options:
          skip_npm_ci: false
    environments:
      master:  false
      audit:   false
      archive: false
      network: false
      commons: true 
      sandbox: false
      develop: false
      staging: false
      product: false
    regions:
      - us-east-1
    account_id: ${var account_id.${env DEPLOY_ENVIRONMENT}}
    assume_role:
      arn: ${var assume_role.${env DEPLOY_ENVIRONMENT}}
      post_deploy_env_revert: true