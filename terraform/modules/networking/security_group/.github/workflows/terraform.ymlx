# We break these apart into separate files so that we can get badges for each one.

name: Terraform (Supported)

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# Variables available to all jobs defined in this file
env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_PLUGIN_CACHE_DIR: ''
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a job called "test".
  test:
    name: Test with Terraform ${{ matrix.terraform_version }}

    # The type of runner on which the job will run.
    runs-on: [self-hosted]

    # Define matrix of things to test.
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        # Will be added by the repo
        terraform_version:
          - '0.15'
          - '1.0'

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # - name: Correct file ownership issues
      #   run: |
      #     echo "Updating existing workspace file ownership"
      #     sudo chown -R $USER:$USER "${{ github.workspace }}"
      #     sudo chown -R $USER:$USER "/github/workspace/_tool"

      # - name: Write SSH key to disk
      #   run: |
      #     mkdir -p /home/$USER/.ssh
      #     ssh-keygen -R github.com || true
      #     echo "$SVC_TERRAFORM_ORG_PEM" > /home/$USER/.ssh/id_rsa
      #     echo "$SVC_TERRAFORM_ORG_PUB" > /home/$USER/.ssh/id_rsa.pub
      #     chmod -f 0600 /home/$USER/.ssh/id_rsa /home/$USER/.ssh/id_rsa.pub
      #     ssh-keyscan -H github.com >> /home/$USER/.ssh/known_hosts

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - uses: actions/checkout@v3
        # with:
        #   token: ${{ secrets.SVC_TERRAFORM_GITHUB_ACCESS_TOKEN }}

      - uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: setup go env
        run: |
          echo "::set-env name=GOPATH::${{ github.workspace }}/go"
          echo "::add-path::${{ github.workspace }}/go/bin"
        shell: bash

      - name: Setup iamlive
        run: |
          wget https://github.com/iann0036/iamlive/releases/download/v0.46.0/iamlive-v0.46.0-linux-amd64.tar.gz
          tar xvf iamlive-v0.46.0-linux-amd64.tar.gz
          mkdir -p $GITHUB_WORKSPACE/bin
          mv iamlive $GITHUB_WORKSPACE/bin/iamlive
          echo "::add-path::$GITHUB_WORKSPACE/bin"
          chmod +x $GITHUB_WORKSPACE/bin/iamlive

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}
          terraform_wrapper: false

      - name: Run the tests
        env:
          GOCACHE: ${{ github.workspace }}
          HOME: ${{ github.workspace }}
        #   GITHUB_TOKEN: ${{ secrets.SVC_TERRAFORM_GITHUB_ACCESS_TOKEN }}
        run: |
          make -k test